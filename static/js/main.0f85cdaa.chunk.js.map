{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard-style.ts","components/QuestionCard.tsx","images/beach.jpg","app-style.ts","components/footer.tsx","App.tsx","index.tsx"],"names":["Difficulty","fetchQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","dangerouslySetInnerHTML","__html","className","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","BGImage","Footer","style","marginTop","App","useState","loading","loadingSet","questions","questionsSet","number","numberSet","userAnswers","userAnswersSet","score","scoreSet","gameOver","gameOverSet","console","log","startTrivia","EASY","newQuestion","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQ","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0f85cdaa.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\r\n\r\nexport type Question = {\r\n  category: string;\r\n  correct_answer: string;\r\n  difficulty: string;\r\n  incorrect_answers: string[];\r\n  question: string;\r\n  type: string;\r\n};\r\n\r\nexport type QuestionState = Question & { answers: string[] };\r\n\r\nexport enum Difficulty {\r\n  EASY = \"easy\",\r\n  MEDIUM = \"medium\",\r\n  HARD = \"hard\",\r\n}\r\n\r\nexport const fetchQuestions = async (\r\n  amount: number,\r\n  difficulty: Difficulty\r\n) => {\r\n  const endpoint = `\r\n        https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n  const data = await (await fetch(endpoint)).json();\r\n  return data.results.map((question: Question) => ({\r\n    ...question,\r\n    answers: shuffleArray([\r\n      ...question.incorrect_answers,\r\n      question.correct_answer,\r\n    ]),\r\n  }));\r\n};\r\n","export const shuffleArray = (array: any[]) => {\r\n  return [...array].sort(() => Math.random() - 0.5);\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  max-width: 1100px;\r\n  background: #ebfeff;\r\n  border-radius: 10px;\r\n  border: 2px solid #0085a3;\r\n  padding: 20px;\r\n  box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n  text-align: center;\r\n  p {\r\n    font-size: 1rem;\r\n  }\r\n`;\r\n\r\ntype ButtonWrapperProps = {\r\n  correct: boolean;\r\n  userClicked: boolean;\r\n};\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n  transition: all 0.3s ease;\r\n  :hover {\r\n    opacity: 0.8;\r\n  }\r\n  button {\r\n    cursor: pointer;\r\n    user-select: none;\r\n    font-size: 0.8rem;\r\n    width: 100%;\r\n    height: 40px;\r\n    margin: 5px 0;\r\n    background: ${({ correct, userClicked }) =>\r\n      correct\r\n        ? \"linear-gradient(90deg, #56FFA4, #59BC86)\"\r\n        : !correct && userClicked\r\n        ? \"linear-gradient(90deg, #FF5656, #C16868)\"\r\n        : \"linear-gradient(90deg, #56ccff, #6eafb4)\"};\r\n    border: 3px solid #ffffff;\r\n    box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n    border-radius: 10px;\r\n    color: #fff;\r\n    text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n  }\r\n`;\r\n","import React from \"react\";\r\n//types\r\nimport { AnswerObject } from \"../App\";\r\n//styles\r\nimport { Wrapper, ButtonWrapper } from \"./QuestionCard-style\";\r\n\r\ntype Props = {\r\n  question: string;\r\n  answers: string[];\r\n  callback: (e: React.MouseEvent<HTMLButtonElement>) => void;\r\n  userAnswer: AnswerObject | undefined;\r\n  questionNr: number;\r\n  totalQuestions: number;\r\n};\r\n\r\nexport const QuestionCard: React.FC<Props> = ({\r\n  question,\r\n  answers,\r\n  callback,\r\n  userAnswer,\r\n  questionNr,\r\n  totalQuestions,\r\n}) => {\r\n  return (\r\n    <Wrapper>\r\n      <p>\r\n        Question: {questionNr}/{totalQuestions}\r\n      </p>\r\n      <p dangerouslySetInnerHTML={{ __html: question }} />\r\n      <div className=\"answers\">\r\n        {answers.map((answer) => (\r\n          <div key={answer}>\r\n            <ButtonWrapper\r\n              key={answer}\r\n              correct={userAnswer?.correctAnswer === answer}\r\n              userClicked={userAnswer?.answer === answer}\r\n            >\r\n              <button\r\n                disabled={!!userAnswer}\r\n                value={answer}\r\n                onClick={callback}\r\n              ></button>\r\n            </ButtonWrapper>\r\n\r\n            <span dangerouslySetInnerHTML={{ __html: answer }}></span>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </Wrapper>\r\n  );\r\n};\r\n","export default __webpack_public_path__ + \"static/media/beach.53b5cc59.jpg\";","import styled, { createGlobalStyle } from \"styled-components\";\r\nimport BGImage from \"./images/beach.jpg\";\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n  html {\r\n    height: 100%;\r\n  }\r\n  body {\r\n    background-image: url(${BGImage});\r\n    background-size: cover;\r\n    margin: 0;\r\n    padding: 0 20px;\r\n    display: flex;\r\n    justify-content: center;\r\n  }\r\n  * {\r\n    font-family: 'Catamaran', sans-serif;\r\n    box-sizing: border-box;\r\n  }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  > p {\r\n    color: #fff;\r\n  }\r\n  .score {\r\n    color: #fff;\r\n    font-size: 2rem;\r\n    margin: 0;\r\n  }\r\n  h1 {\r\n    font-family: Fascinate Inline;\r\n    background-image: linear-gradient(180deg, #fff, #87f1ff);\r\n    font-weight: 400;\r\n    background-size: 100%;\r\n    background-clip: text;\r\n    -webkit-background-clip: text;\r\n    -webkit-text-fill-color: transparent;\r\n    -moz-background-clip: text;\r\n    -moz-text-fill-color: transparent;\r\n    filter: drop-shadow(2px 2px #0085a3);\r\n    font-size: 70px;\r\n    text-align: center;\r\n    margin: 20px;\r\n  }\r\n  .start,\r\n  .next {\r\n    cursor: pointer;\r\n    background: linear-gradient(180deg, #ffffff, #ffcc91);\r\n    border: 2px solid #d38558;\r\n    box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n    border-radius: 10px;\r\n    height: 40px;\r\n    margin: 20px 0;\r\n    padding: 0 40px;\r\n  }\r\n  .start {\r\n    max-width: 200px;\r\n  }\r\n`;\r\n","import React from \"react\";\r\n\r\nfunction Footer() {\r\n  return (\r\n    <div className=\"footer\" style={{ marginTop: \"40px\" }}>\r\n      Developed by Chhum Chanleak\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState } from \"react\";\nimport { fetchQuestions } from \"./API\";\n//components\nimport { QuestionCard } from \"./components/QuestionCard\";\n//types\nimport { Difficulty, QuestionState } from \"./API\";\n//styles\nimport { Wrapper, GlobalStyle } from \"./app-style\";\nimport Footer from \"./components/footer\";\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\nfunction App() {\n  //hooks\n  const [loading, loadingSet] = useState(false);\n  const [questions, questionsSet] = useState<QuestionState[]>([]);\n  const [number, numberSet] = useState(0);\n  const [userAnswers, userAnswersSet] = useState<AnswerObject[]>([]);\n  const [score, scoreSet] = useState(0);\n  const [gameOver, gameOverSet] = useState(true);\n\n  const TOTAL_QUESTIONS = 10;\n\n  console.log(questions);\n\n  //functions\n  const startTrivia = async () => {\n    loadingSet(true);\n    gameOverSet(false);\n\n    const newQuestion = await fetchQuestions(TOTAL_QUESTIONS, Difficulty.EASY);\n\n    questionsSet(newQuestion);\n    scoreSet(0);\n    userAnswersSet([]);\n    numberSet(0);\n    loadingSet(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    if (!gameOver) {\n      // user answer\n      const answer = e.currentTarget.value;\n      // check answer with correct answer\n      const correct = questions[number].correct_answer === answer;\n      // Add score if answer is correct\n      if (correct) {\n        scoreSet((prev) => prev + 1);\n      }\n      // save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      userAnswersSet((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    //go to the next question\n    const nextQ = number + 1;\n\n    if (nextQ === TOTAL_QUESTIONS) {\n      gameOverSet(true);\n    } else {\n      numberSet(nextQ);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper>\n        <h1>React Quizz</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startTrivia}>\n            {\" \"}\n            Start Quiz\n          </button>\n        ) : null}\n\n        {!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n        {loading ? <p>Loading Questions...</p> : null}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNr={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n\n        {!gameOver &&\n        !loading &&\n        userAnswers.length === number + 1 &&\n        number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n        <Footer />\n      </Wrapper>\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}